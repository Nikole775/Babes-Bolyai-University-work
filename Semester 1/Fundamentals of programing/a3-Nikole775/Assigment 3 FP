Project 1: A comprehensive menu-driven Python console application that brings to life the workings of searching and sorting algorithms. This project offers users a hands-on experience with:

Exponential Search for efficiently locating elements.
Visualization of sorting algorithms, including Bogosort and Stooge Sort, with step-by-step operations.
Menu options for generating random lists, performing searches, and sorting.
Analysis of the algorithms under various scenarios: Best Case, Worst Case, and Average Case with detailed runtime insights.
Designed to deepen understanding through practical interaction, the project adheres to modular programming principles, ensuring clarity and maintainability.

Key Features:

Generate random number lists (range: 0â€“1000) of user-defined sizes.
Step-by-step sorting visualization based on user-defined operation intervals.
Detailed runtime metrics for different algorithm scenarios.
User-friendly menu-driven interface.
Usage: Ideal for students, educators, and enthusiasts exploring algorithmic behavior in different cases. Includes explanatory comments to aid learning.

Project 2: Bubble and Heap Sort Analysis Tool
Dive deep into the Bubble Sort and Heap Sort algorithms with this Python-based interactive console program. Designed to analyze the performance of these sorting algorithms, this tool provides users with:

Sorting of random number lists of various sizes (up to 1000 elements).
Runtime analysis under Best, Average, and Worst Case scenarios.
A modular menu system for seamless navigation and exploration.
Key Features:

Generate lists of random numbers or create specialized cases (ascending, descending, identical, or unique).
Perform sorting with real-time runtime metrics for Bubble Sort and Heap Sort.
Explore algorithm efficiency and complexity with clear runtime data.
Accessible and intuitive user interface for effortless experimentation.
Use Cases: This project is perfect for algorithm enthusiasts, students studying data structures, or anyone keen to explore sorting techniques and their complexities.
